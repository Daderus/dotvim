#!/bin/bash
#
# File          template.sh
# Author        H. Klausing
# Creation      2015-10-11
#
# Description   This is a template script with some useful content that can be
#               easily take for final script function.
#               Start requirements: option -a, -b or extra data is required.
#
################################################################################


readonly FULL_NAME=$0
readonly SCRIPT_NAME=$(basename $FULL_NAME)
readonly LOCK_FILE=/tmp/$SCRIPT_NAME.lock
readonly VERSION=0.0.1

# list of required command for early check
readonly NEEDED_COMMANDS="rm sed"


################################################################################
### Functions
################################################################################


#-------------------------------------------------------------------------------
# Shows a script help information
# Param1:   -
# Return:   -
#-------------------------------------------------------------------------------
printUsage()
{
    cat <<END
usage: $SCRIPT_NAME [OPTION] ...

OPTION optional parameter:
  -a        The optional parameter 'a'
  -b value  The optional parameter 'b' with required value
  -h        Print this help
  -v        Increment verbose level
  -V        Print script version

EXAMPLE:
  $SCRIPT_NAME -b optb
END
}

#-------------------------------------------------------------------------------
# Shows an error text on STDERR
# Param1:   text information
# Return:   -
#-------------------------------------------------------------------------------
printError()
{
    echo "ERROR: $1" >&2
}

#-------------------------------------------------------------------------------
# Check if all needed commands existing on the system. The variable 
# needed_commands list all required commands.
# Param1:   -
# Return:   -
#-------------------------------------------------------------------------------
checkNeededCommands()
{
    # counter is used to find missing behaviours
    missing_counter=0

    # scan each command
    for needed_command in $NEEDED_COMMANDS; do

        if ! hash "$needed_command" >/dev/null 2>&1; then
            printError "Command not found in PATH: $needed_command"
            ((missing_counter++))
        fi

    done

    # check count result
    if ((missing_counter > 0)); then
        printError "Minimum $missing_counter commands are missing in PATH, aborting!"
        exit 1
    fi

}

#-------------------------------------------------------------------------------
# Cleanup some stuff before the script will be stopped.
# Param1:   -
# Return:   -
#-------------------------------------------------------------------------------
finishScript()
{
    # delete lock file
    rm -f $LOCK_FILE
}




################################################################################
### Main script entry 
################################################################################

# verify that all commands are available
checkNeededCommands

options_found=0         # will be incremented be each found option
opt_a=0                 # default 0
opt_b="defaultValue"    # default test info
opt_verbose=0           # default value 0

# parameter while-loop
while getopts :ab:hvV optname; do
    (( options_found++ ))
    case ${optname} in
        a)  
            opt_a=1;
            ;;
        b)  
            opt_b=$OPTARG;
            ;;
        h)  
            printUsage;
            exit 0; 
            ;;
        v)  
            (( opt_verbose++ ));
            ;;
        V)  
            echo "Version ${VERSION}";
            exit 0
            ;;
        \?)
            printError "Unknown argument -$OPTARG while processing options!";
            exit 1;         # error
            ;;
        :)
            printError "Option -$OPTARG requires an argument.";
            exit 1;         # error
            ;;
    esac
done

# get a list of extra parameters
shift $(($OPTIND - 1))
OPTEXTRA=$@

# check if one or more options were found
if [[ $options_found -eq 0 && -z "$OPTEXTRA" ]]; then
    printError "Called with no parameter!"
    exit 1
fi

# Locks script execution
if [ -f "$LOCK_FILE" ]; then
   printError "Script is already running"
   exit 1
fi

# delete lock file if the script recieved the signal EXIT
trap finishScript EXIT

# create lock file
touch $LOCK_FILE



################################################################################
### Start with script body
################################################################################



# show options
echo "option: opt_a=$opt_a, opt_b=$opt_b, opt_verbose=$opt_verbose"
[ -n "$OPTEXTRA" ] && echo "extras: ${OPTEXTRA[*]}"


exit 0
###

